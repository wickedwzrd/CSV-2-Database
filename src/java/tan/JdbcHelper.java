package tan;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
 
 
public class JdbcHelper
{
    // member data fields
    private Connection connection = null;
    private Statement statement = null;
    private ResultSet resultSet = null;
    private String errorMessage = "";       // current error message
 
    // for prepared statement operation
    private String activeSql = "";
    private PreparedStatement activeStatement = null;
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // connect to a database and create a statement object
    ///////////////////////////////////////////////////////////////////////////
    public void connect(String url, String user, String pass)
    {
        try
        {
            errorMessage = "";
 
            // getConnection() requires 3 params: URL, user and password.
            // DriverManager will load the JDBC driver automatically based on URL.
            // NOTE: Tomcat requires Class.forName() to load driver properly
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(url, user, pass);
 
            // create a SQL statement object with current connection
            statement = connection.createStatement();
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // release any resources and close connection to the database
    // It simply ignores any error generated by close()
    ///////////////////////////////////////////////////////////////////////////
    public void disconnect()
    {
        activeSql = "";
        try{ resultSet.close();  }      catch(Exception e){}
        try{ statement.close();  }      catch(Exception e){}
        try{ activeStatement.close(); } catch(Exception e){}
        try{ connection.close(); }      catch(Exception e){}
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // execute a SQL query statement and return the result set to the caller
    ///////////////////////////////////////////////////////////////////////////
    public ResultSet query(String sql)
    {
        try
        {
            errorMessage = "";
            resultSet = statement.executeQuery(sql);
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
 
        return resultSet;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // execute a prepared SQL query statement and return the result set
    ///////////////////////////////////////////////////////////////////////////
    public ResultSet query(String sql, ArrayList<Object> params)
    {
        try
        {
            errorMessage = "";
 
            // if sql statement changed, need to create new prepared statement
            if(!sql.equals(activeSql))
            {
                activeStatement = connection.prepareStatement(sql);
                activeSql = sql;
            }
 
            // set all parameter values of prepared statement
            if(params != null)
                setParametersForPreparedStatement(params);
 
            // execute the prepared statement
            resultSet = activeStatement.executeQuery();
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
 
        return resultSet;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // execute a SQL statement that returns nothing, e.g: INSERT, UPDATE, etc.
    // It returns # of rows updated, or 0 for success. If failed, returns -1.
    ///////////////////////////////////////////////////////////////////////////
    public int update(String sql)
    {
        int result = -1;
        try
        {
            errorMessage = "";
            result = statement.executeUpdate(sql);
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
        return result;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // execute a prepared SQL statement that returns nothing
    // It returns # of rows updated, or 0 for success. If failed, returns -1.
    ///////////////////////////////////////////////////////////////////////////
    public int update(String sql, ArrayList<Object> params)
    {
        int result = -1;
        try
        {
            errorMessage = "";
 
            // if sql statement changed, need to create new prepared statement
            if(!sql.equals(activeSql))
            {
                activeStatement = connection.prepareStatement(sql);
                activeSql = sql;
            }
 
            // set all params
            if(params != null)
                setParametersForPreparedStatement(params);
 
            // execute the prepared statement
            result = activeStatement.executeUpdate();
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
 
        return result;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // return a prepared SQL statement
    ///////////////////////////////////////////////////////////////////////////
    public PreparedStatement prepareStatement(String sql)
    {
        try
        {
            errorMessage = "";
 
            // if sql statement changed, need to create new prepared statement
            if(!sql.equals(activeSql))
            {
                activeStatement = connection.prepareStatement(sql);
                activeSql = sql;
            }
        }
        catch(SQLException e)
        {
            errorMessage = e.getSQLState() + ": " + e.getMessage();
            System.err.println(errorMessage);
        }
        catch(Exception e)
        {
            errorMessage = e.getMessage();
            e.printStackTrace();
        }
 
        return activeStatement;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // return the current error message
    ///////////////////////////////////////////////////////////////////////////
    public String getErrorMessage()
    {
        return errorMessage;
    }
 
 
 
    ///////////////////////////////////////////////////////////////////////////
    // set the params of the prepared statement
    // It will cast each param to proper data type before calling setXXX()
    ///////////////////////////////////////////////////////////////////////////
    private void setParametersForPreparedStatement(ArrayList<Object> params) throws SQLException
    {
        for(int i = 0; i < params.size(); ++i)
        {
            Object param = params.get(i);
            if(param instanceof Integer)
            {
                activeStatement.setInt(i+1, (int)param);
            }
            else if(param instanceof Double)
            {
                activeStatement.setDouble(i+1, (double)param);
            }
            else if(param instanceof String)
            {
                activeStatement.setString(i+1, (String)param);
            }
        }
    }
}